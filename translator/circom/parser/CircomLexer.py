# Generated from ./CircomLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,82,527,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,
        32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
        38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,
        44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,
        52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,
        58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,
        63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,
        67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,
        71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,4,75,459,
        8,75,11,75,12,75,460,1,76,1,76,1,76,1,76,5,76,467,8,76,10,76,12,
        76,470,9,76,1,77,5,77,473,8,77,10,77,12,77,476,9,77,1,77,1,77,5,
        77,480,8,77,10,77,12,77,483,9,77,1,78,1,78,5,78,487,8,78,10,78,12,
        78,490,9,78,1,78,1,78,1,79,4,79,495,8,79,11,79,12,79,496,1,79,1,
        79,1,80,1,80,1,80,1,80,5,80,505,8,80,10,80,12,80,508,9,80,1,80,1,
        80,1,80,1,80,1,81,1,81,1,81,1,81,5,81,518,8,81,10,81,12,81,521,9,
        81,1,81,1,81,1,81,1,81,1,81,2,506,519,0,82,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,
        60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,
        139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,
        79,159,80,161,81,163,82,1,0,7,1,0,48,57,3,0,48,57,65,70,97,102,2,
        0,36,36,95,95,2,0,65,90,97,122,5,0,36,36,48,57,65,90,95,95,97,122,
        2,0,10,10,34,34,3,0,9,10,13,13,32,32,534,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
        123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
        0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,
        1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,
        0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,
        0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,1,165,1,0,0,0,3,172,1,0,0,0,5,
        179,1,0,0,0,7,196,1,0,0,0,9,204,1,0,0,0,11,214,1,0,0,0,13,223,1,
        0,0,0,15,232,1,0,0,0,17,239,1,0,0,0,19,243,1,0,0,0,21,250,1,0,0,
        0,23,256,1,0,0,0,25,263,1,0,0,0,27,266,1,0,0,0,29,271,1,0,0,0,31,
        275,1,0,0,0,33,281,1,0,0,0,35,288,1,0,0,0,37,295,1,0,0,0,39,299,
        1,0,0,0,41,308,1,0,0,0,43,313,1,0,0,0,45,316,1,0,0,0,47,319,1,0,
        0,0,49,322,1,0,0,0,51,325,1,0,0,0,53,327,1,0,0,0,55,329,1,0,0,0,
        57,332,1,0,0,0,59,335,1,0,0,0,61,337,1,0,0,0,63,339,1,0,0,0,65,342,
        1,0,0,0,67,345,1,0,0,0,69,347,1,0,0,0,71,349,1,0,0,0,73,351,1,0,
        0,0,75,353,1,0,0,0,77,355,1,0,0,0,79,357,1,0,0,0,81,360,1,0,0,0,
        83,362,1,0,0,0,85,364,1,0,0,0,87,366,1,0,0,0,89,368,1,0,0,0,91,372,
        1,0,0,0,93,376,1,0,0,0,95,380,1,0,0,0,97,384,1,0,0,0,99,388,1,0,
        0,0,101,390,1,0,0,0,103,392,1,0,0,0,105,394,1,0,0,0,107,396,1,0,
        0,0,109,398,1,0,0,0,111,400,1,0,0,0,113,402,1,0,0,0,115,404,1,0,
        0,0,117,406,1,0,0,0,119,408,1,0,0,0,121,410,1,0,0,0,123,412,1,0,
        0,0,125,415,1,0,0,0,127,419,1,0,0,0,129,422,1,0,0,0,131,425,1,0,
        0,0,133,428,1,0,0,0,135,431,1,0,0,0,137,434,1,0,0,0,139,438,1,0,
        0,0,141,442,1,0,0,0,143,445,1,0,0,0,145,448,1,0,0,0,147,451,1,0,
        0,0,149,454,1,0,0,0,151,458,1,0,0,0,153,462,1,0,0,0,155,474,1,0,
        0,0,157,484,1,0,0,0,159,494,1,0,0,0,161,500,1,0,0,0,163,513,1,0,
        0,0,165,166,5,112,0,0,166,167,5,114,0,0,167,168,5,97,0,0,168,169,
        5,103,0,0,169,170,5,109,0,0,170,171,5,97,0,0,171,2,1,0,0,0,172,173,
        5,99,0,0,173,174,5,105,0,0,174,175,5,114,0,0,175,176,5,99,0,0,176,
        177,5,111,0,0,177,178,5,109,0,0,178,4,1,0,0,0,179,180,5,99,0,0,180,
        181,5,117,0,0,181,182,5,115,0,0,182,183,5,116,0,0,183,184,5,111,
        0,0,184,185,5,109,0,0,185,186,5,95,0,0,186,187,5,116,0,0,187,188,
        5,101,0,0,188,189,5,109,0,0,189,190,5,112,0,0,190,191,5,108,0,0,
        191,192,5,97,0,0,192,193,5,116,0,0,193,194,5,101,0,0,194,195,5,115,
        0,0,195,6,1,0,0,0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,
        99,0,0,199,200,5,108,0,0,200,201,5,117,0,0,201,202,5,100,0,0,202,
        203,5,101,0,0,203,8,1,0,0,0,204,205,5,99,0,0,205,206,5,111,0,0,206,
        207,5,109,0,0,207,208,5,112,0,0,208,209,5,111,0,0,209,210,5,110,
        0,0,210,211,5,101,0,0,211,212,5,110,0,0,212,213,5,116,0,0,213,10,
        1,0,0,0,214,215,5,102,0,0,215,216,5,117,0,0,216,217,5,110,0,0,217,
        218,5,99,0,0,218,219,5,116,0,0,219,220,5,105,0,0,220,221,5,111,0,
        0,221,222,5,110,0,0,222,12,1,0,0,0,223,224,5,116,0,0,224,225,5,101,
        0,0,225,226,5,109,0,0,226,227,5,112,0,0,227,228,5,108,0,0,228,229,
        5,97,0,0,229,230,5,116,0,0,230,231,5,101,0,0,231,14,1,0,0,0,232,
        233,5,112,0,0,233,234,5,117,0,0,234,235,5,98,0,0,235,236,5,108,0,
        0,236,237,5,105,0,0,237,238,5,99,0,0,238,16,1,0,0,0,239,240,5,118,
        0,0,240,241,5,97,0,0,241,242,5,114,0,0,242,18,1,0,0,0,243,244,5,
        115,0,0,244,245,5,105,0,0,245,246,5,103,0,0,246,247,5,110,0,0,247,
        248,5,97,0,0,248,249,5,108,0,0,249,20,1,0,0,0,250,251,5,105,0,0,
        251,252,5,110,0,0,252,253,5,112,0,0,253,254,5,117,0,0,254,255,5,
        116,0,0,255,22,1,0,0,0,256,257,5,111,0,0,257,258,5,117,0,0,258,259,
        5,116,0,0,259,260,5,112,0,0,260,261,5,117,0,0,261,262,5,116,0,0,
        262,24,1,0,0,0,263,264,5,105,0,0,264,265,5,102,0,0,265,26,1,0,0,
        0,266,267,5,101,0,0,267,268,5,108,0,0,268,269,5,115,0,0,269,270,
        5,101,0,0,270,28,1,0,0,0,271,272,5,102,0,0,272,273,5,111,0,0,273,
        274,5,114,0,0,274,30,1,0,0,0,275,276,5,119,0,0,276,277,5,104,0,0,
        277,278,5,105,0,0,278,279,5,108,0,0,279,280,5,101,0,0,280,32,1,0,
        0,0,281,282,5,114,0,0,282,283,5,101,0,0,283,284,5,116,0,0,284,285,
        5,117,0,0,285,286,5,114,0,0,286,287,5,110,0,0,287,34,1,0,0,0,288,
        289,5,97,0,0,289,290,5,115,0,0,290,291,5,115,0,0,291,292,5,101,0,
        0,292,293,5,114,0,0,293,294,5,116,0,0,294,36,1,0,0,0,295,296,5,108,
        0,0,296,297,5,111,0,0,297,298,5,103,0,0,298,38,1,0,0,0,299,300,5,
        112,0,0,300,301,5,97,0,0,301,302,5,114,0,0,302,303,5,97,0,0,303,
        304,5,108,0,0,304,305,5,108,0,0,305,306,5,101,0,0,306,307,5,108,
        0,0,307,40,1,0,0,0,308,309,5,109,0,0,309,310,5,97,0,0,310,311,5,
        105,0,0,311,312,5,110,0,0,312,42,1,0,0,0,313,314,5,124,0,0,314,315,
        5,124,0,0,315,44,1,0,0,0,316,317,5,38,0,0,317,318,5,38,0,0,318,46,
        1,0,0,0,319,320,5,61,0,0,320,321,5,61,0,0,321,48,1,0,0,0,322,323,
        5,33,0,0,323,324,5,61,0,0,324,50,1,0,0,0,325,326,5,60,0,0,326,52,
        1,0,0,0,327,328,5,62,0,0,328,54,1,0,0,0,329,330,5,60,0,0,330,331,
        5,61,0,0,331,56,1,0,0,0,332,333,5,62,0,0,333,334,5,61,0,0,334,58,
        1,0,0,0,335,336,5,124,0,0,336,60,1,0,0,0,337,338,5,38,0,0,338,62,
        1,0,0,0,339,340,5,60,0,0,340,341,5,60,0,0,341,64,1,0,0,0,342,343,
        5,62,0,0,343,344,5,62,0,0,344,66,1,0,0,0,345,346,5,43,0,0,346,68,
        1,0,0,0,347,348,5,45,0,0,348,70,1,0,0,0,349,350,5,42,0,0,350,72,
        1,0,0,0,351,352,5,47,0,0,352,74,1,0,0,0,353,354,5,92,0,0,354,76,
        1,0,0,0,355,356,5,37,0,0,356,78,1,0,0,0,357,358,5,42,0,0,358,359,
        5,42,0,0,359,80,1,0,0,0,360,361,5,94,0,0,361,82,1,0,0,0,362,363,
        5,33,0,0,363,84,1,0,0,0,364,365,5,126,0,0,365,86,1,0,0,0,366,367,
        5,61,0,0,367,88,1,0,0,0,368,369,5,60,0,0,369,370,5,45,0,0,370,371,
        5,45,0,0,371,90,1,0,0,0,372,373,5,60,0,0,373,374,5,61,0,0,374,375,
        5,61,0,0,375,92,1,0,0,0,376,377,5,45,0,0,377,378,5,45,0,0,378,379,
        5,62,0,0,379,94,1,0,0,0,380,381,5,61,0,0,381,382,5,61,0,0,382,383,
        5,62,0,0,383,96,1,0,0,0,384,385,5,61,0,0,385,386,5,61,0,0,386,387,
        5,61,0,0,387,98,1,0,0,0,388,389,5,63,0,0,389,100,1,0,0,0,390,391,
        5,58,0,0,391,102,1,0,0,0,392,393,5,46,0,0,393,104,1,0,0,0,394,395,
        5,95,0,0,395,106,1,0,0,0,396,397,5,40,0,0,397,108,1,0,0,0,398,399,
        5,41,0,0,399,110,1,0,0,0,400,401,5,123,0,0,401,112,1,0,0,0,402,403,
        5,125,0,0,403,114,1,0,0,0,404,405,5,91,0,0,405,116,1,0,0,0,406,407,
        5,93,0,0,407,118,1,0,0,0,408,409,5,44,0,0,409,120,1,0,0,0,410,411,
        5,59,0,0,411,122,1,0,0,0,412,413,5,92,0,0,413,414,5,61,0,0,414,124,
        1,0,0,0,415,416,5,42,0,0,416,417,5,42,0,0,417,418,5,61,0,0,418,126,
        1,0,0,0,419,420,5,43,0,0,420,421,5,61,0,0,421,128,1,0,0,0,422,423,
        5,45,0,0,423,424,5,61,0,0,424,130,1,0,0,0,425,426,5,42,0,0,426,427,
        5,61,0,0,427,132,1,0,0,0,428,429,5,47,0,0,429,430,5,61,0,0,430,134,
        1,0,0,0,431,432,5,37,0,0,432,433,5,61,0,0,433,136,1,0,0,0,434,435,
        5,60,0,0,435,436,5,60,0,0,436,437,5,61,0,0,437,138,1,0,0,0,438,439,
        5,62,0,0,439,440,5,62,0,0,440,441,5,61,0,0,441,140,1,0,0,0,442,443,
        5,38,0,0,443,444,5,61,0,0,444,142,1,0,0,0,445,446,5,124,0,0,446,
        447,5,61,0,0,447,144,1,0,0,0,448,449,5,94,0,0,449,450,5,61,0,0,450,
        146,1,0,0,0,451,452,5,43,0,0,452,453,5,43,0,0,453,148,1,0,0,0,454,
        455,5,45,0,0,455,456,5,45,0,0,456,150,1,0,0,0,457,459,7,0,0,0,458,
        457,1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,
        152,1,0,0,0,462,463,5,48,0,0,463,464,5,120,0,0,464,468,1,0,0,0,465,
        467,7,1,0,0,466,465,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,
        469,1,0,0,0,469,154,1,0,0,0,470,468,1,0,0,0,471,473,7,2,0,0,472,
        471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,
        477,1,0,0,0,476,474,1,0,0,0,477,481,7,3,0,0,478,480,7,4,0,0,479,
        478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,
        156,1,0,0,0,483,481,1,0,0,0,484,488,5,34,0,0,485,487,8,5,0,0,486,
        485,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,
        491,1,0,0,0,490,488,1,0,0,0,491,492,5,34,0,0,492,158,1,0,0,0,493,
        495,7,6,0,0,494,493,1,0,0,0,495,496,1,0,0,0,496,494,1,0,0,0,496,
        497,1,0,0,0,497,498,1,0,0,0,498,499,6,79,0,0,499,160,1,0,0,0,500,
        501,5,47,0,0,501,502,5,47,0,0,502,506,1,0,0,0,503,505,9,0,0,0,504,
        503,1,0,0,0,505,508,1,0,0,0,506,507,1,0,0,0,506,504,1,0,0,0,507,
        509,1,0,0,0,508,506,1,0,0,0,509,510,5,10,0,0,510,511,1,0,0,0,511,
        512,6,80,0,0,512,162,1,0,0,0,513,514,5,47,0,0,514,515,5,42,0,0,515,
        519,1,0,0,0,516,518,9,0,0,0,517,516,1,0,0,0,518,521,1,0,0,0,519,
        520,1,0,0,0,519,517,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,
        523,5,42,0,0,523,524,5,47,0,0,524,525,1,0,0,0,525,526,6,81,0,0,526,
        164,1,0,0,0,9,0,460,468,474,481,488,496,506,519,1,6,0,0
    ]

class CircomLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRAGMA = 1
    CIRCOM = 2
    CUSTOM_TEMPLATES = 3
    INCLUDE = 4
    COMPONENT = 5
    FUNCTION = 6
    TEMPLATE = 7
    PUBLIC = 8
    VAR = 9
    SIGNAL = 10
    INPUT = 11
    OUTPUT = 12
    IF = 13
    ELSE = 14
    FOR = 15
    WHILE = 16
    RETURN = 17
    ASSERT = 18
    LOG = 19
    PARALLEL = 20
    MAIN = 21
    OR = 22
    AND = 23
    EQ = 24
    NEQ = 25
    LT = 26
    GT = 27
    LE = 28
    GE = 29
    OR_BIT = 30
    AND_BIT = 31
    SHIFTL = 32
    SHIFTR = 33
    PLUS = 34
    MINUS = 35
    MUL = 36
    DIV = 37
    INTDIV = 38
    MOD = 39
    POW = 40
    XOR_BIT = 41
    NOT = 42
    COMPLEMENT = 43
    ASSIGN_VAR = 44
    ASSIGN_SIGNAL = 45
    ASSIGN_CONSTRAINT_SIGNAL = 46
    RIGHT_ASSIGN_SIGNAL = 47
    RIGHT_ASSIGN_CONSTRAINT_SIGNAL = 48
    CONSTRAINT_EQUALITY = 49
    QUESTION = 50
    COLON = 51
    DOT = 52
    UNDERLINE = 53
    LPAREN = 54
    RPAREN = 55
    LBRACE = 56
    RBRACE = 57
    LSQUARE = 58
    RSQUARE = 59
    COMMA = 60
    SEMICOLON = 61
    INTDIVEQ = 62
    POWEQ = 63
    PLUSEQ = 64
    MINUSEQ = 65
    MULTEQ = 66
    DIVEQ = 67
    MODEQ = 68
    SHIFTLEQ = 69
    SHIFTREQ = 70
    AND_BITEQ = 71
    OR_BITEQ = 72
    XOR_BITEQ = 73
    INCREMENT = 74
    DECREMENT = 75
    DECNUMBER = 76
    HEXNUMBER = 77
    IDENTIFIER = 78
    STRING = 79
    WHITESPACE = 80
    COMMENT = 81
    MULTILINE_COMMENT = 82

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'pragma'", "'circom'", "'custom_templates'", "'include'", "'component'", 
            "'function'", "'template'", "'public'", "'var'", "'signal'", 
            "'input'", "'output'", "'if'", "'else'", "'for'", "'while'", 
            "'return'", "'assert'", "'log'", "'parallel'", "'main'", "'||'", 
            "'&&'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'|'", 
            "'&'", "'<<'", "'>>'", "'+'", "'-'", "'*'", "'/'", "'\\'", "'%'", 
            "'**'", "'^'", "'!'", "'~'", "'='", "'<--'", "'<=='", "'-->'", 
            "'==>'", "'==='", "'?'", "':'", "'.'", "'_'", "'('", "')'", 
            "'{'", "'}'", "'['", "']'", "','", "';'", "'\\='", "'**='", 
            "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", "'&='", 
            "'|='", "'^='", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "PRAGMA", "CIRCOM", "CUSTOM_TEMPLATES", "INCLUDE", "COMPONENT", 
            "FUNCTION", "TEMPLATE", "PUBLIC", "VAR", "SIGNAL", "INPUT", 
            "OUTPUT", "IF", "ELSE", "FOR", "WHILE", "RETURN", "ASSERT", 
            "LOG", "PARALLEL", "MAIN", "OR", "AND", "EQ", "NEQ", "LT", "GT", 
            "LE", "GE", "OR_BIT", "AND_BIT", "SHIFTL", "SHIFTR", "PLUS", 
            "MINUS", "MUL", "DIV", "INTDIV", "MOD", "POW", "XOR_BIT", "NOT", 
            "COMPLEMENT", "ASSIGN_VAR", "ASSIGN_SIGNAL", "ASSIGN_CONSTRAINT_SIGNAL", 
            "RIGHT_ASSIGN_SIGNAL", "RIGHT_ASSIGN_CONSTRAINT_SIGNAL", "CONSTRAINT_EQUALITY", 
            "QUESTION", "COLON", "DOT", "UNDERLINE", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LSQUARE", "RSQUARE", "COMMA", "SEMICOLON", 
            "INTDIVEQ", "POWEQ", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", 
            "MODEQ", "SHIFTLEQ", "SHIFTREQ", "AND_BITEQ", "OR_BITEQ", "XOR_BITEQ", 
            "INCREMENT", "DECREMENT", "DECNUMBER", "HEXNUMBER", "IDENTIFIER", 
            "STRING", "WHITESPACE", "COMMENT", "MULTILINE_COMMENT" ]

    ruleNames = [ "PRAGMA", "CIRCOM", "CUSTOM_TEMPLATES", "INCLUDE", "COMPONENT", 
                  "FUNCTION", "TEMPLATE", "PUBLIC", "VAR", "SIGNAL", "INPUT", 
                  "OUTPUT", "IF", "ELSE", "FOR", "WHILE", "RETURN", "ASSERT", 
                  "LOG", "PARALLEL", "MAIN", "OR", "AND", "EQ", "NEQ", "LT", 
                  "GT", "LE", "GE", "OR_BIT", "AND_BIT", "SHIFTL", "SHIFTR", 
                  "PLUS", "MINUS", "MUL", "DIV", "INTDIV", "MOD", "POW", 
                  "XOR_BIT", "NOT", "COMPLEMENT", "ASSIGN_VAR", "ASSIGN_SIGNAL", 
                  "ASSIGN_CONSTRAINT_SIGNAL", "RIGHT_ASSIGN_SIGNAL", "RIGHT_ASSIGN_CONSTRAINT_SIGNAL", 
                  "CONSTRAINT_EQUALITY", "QUESTION", "COLON", "DOT", "UNDERLINE", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LSQUARE", "RSQUARE", 
                  "COMMA", "SEMICOLON", "INTDIVEQ", "POWEQ", "PLUSEQ", "MINUSEQ", 
                  "MULTEQ", "DIVEQ", "MODEQ", "SHIFTLEQ", "SHIFTREQ", "AND_BITEQ", 
                  "OR_BITEQ", "XOR_BITEQ", "INCREMENT", "DECREMENT", "DECNUMBER", 
                  "HEXNUMBER", "IDENTIFIER", "STRING", "WHITESPACE", "COMMENT", 
                  "MULTILINE_COMMENT" ]

    grammarFileName = "CircomLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


